<launch>

    <env name="GAZEBO_MODEL_PATH" value="$(find heist)/models:$(optenv GAZEBO_MODEL_PATH)"/>
    <arg name="map_file" default="$(find heist_guard)/maps/map_2/map_2.yaml"/>


    <!-- set params for initialization -->
    <param name="szenario" value="map_1"/>
    <arg name="model" default="burger"/>
    <arg name="first_tb3" default="guard"/>
    <arg name="second_tb3" default="evader"/>

    <!-- guard start position -->
    <arg name="first_tb3_x_pos" default="-1.0"/>
    <arg name="first_tb3_y_pos" default=" 2.0"/>
    <arg name="first_tb3_z_pos" default=" 0.0"/>
    <arg name="first_tb3_yaw" default=" 0.0"/>
    <param name="guard_start_pos_x" value="$(arg first_tb3_x_pos)"/>
    <param name="guard_start_pos_y" value="$(arg first_tb3_y_pos)"/>

    <!-- evader start position -->
    <arg name="second_tb3_x_pos" default=" 2.0"/>
    <arg name="second_tb3_y_pos" default="-1.0"/>
    <arg name="second_tb3_z_pos" default=" 0.0"/>
    <arg name="second_tb3_yaw" default=" 1.57"/>
    <param name="evader_start_pos_x" value="$(arg second_tb3_x_pos)"/>
    <param name="evader_start_pos_y" value="$(arg second_tb3_y_pos)"/>

    <!-- start world simulation -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find heist)/worlds/map_2.world"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="headless" value="false"/>
        <arg name="debug" value="false"/>
    </include>

    <!-- Run the map server -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(find heist_guard)/maps/map_2/map_2.yaml" >
        <param name="frame_id" value="/map" />
    </node>

    <!-- guard -->
    <group ns="$(arg first_tb3)">
        <param name="tf_prefix" value="$(arg first_tb3)_tf"/>
        <param name="robot_description" command="$(find xacro)/xacro $(find heist)/urdf/turtlebot3_$(arg model)_red.urdf.xacro"/>
        <param name="amcl/initial_pose_x" value="$(arg first_tb3_x_pos)" />
        <param name="amcl/initial_pose_y" value="$(arg first_tb3_y_pos)" />

        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
            <param name="publish_frequency" type="double" value="50.0"/>
        </node>

        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
              args="-urdf -model $(arg first_tb3) -x $(arg first_tb3_x_pos) -y $(arg first_tb3_y_pos) -z $(arg first_tb3_z_pos) -Y $(arg first_tb3_yaw) -param robot_description" respawn="false" output="screen" />

        <node name="guard_perception" type="perception.py" pkg="heist" args="/evader/odom /guard/perception_of_evader 1.0 1.0" />

        <include file="$(find heist_guard)/launch/move_base.launch"/>
    </group>


    <!-- evader -->
    <group ns="$(arg second_tb3)">
        <param name="robot_description"
               command="$(find xacro)/xacro $(find heist)/urdf/turtlebot3_$(arg model)_green.urdf.xacro"/>

        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
            <param name="publish_frequency" type="double" value="50.0"/>
            <param name="tf_prefix" value="$(arg second_tb3)"/>
        </node>

        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
              args="-urdf -model $(arg second_tb3) -x $(arg second_tb3_x_pos) -y $(arg second_tb3_y_pos) -z $(arg second_tb3_z_pos) -Y $(arg second_tb3_yaw) -param robot_description"/>

      <node name="evader_perception" type="perception.py" pkg="heist" args="/guard/odom /evader/perception_of_guard 1.0 1.0" />
    </group>


    <node name="map_1_setup" type="map_1_setup.py" pkg="heist"/>
    <node name="heist_tracker" type="heist_tracker.py" pkg="heist"/>
    <node name="heist_client" type="heist_client.py" pkg="heist"/>
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find your_pkg)/config/multi.vcg" output="screen" />
</launch>